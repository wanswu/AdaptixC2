name: Build Adaptix C2

on:
  push:  # 任何提交都会触发工作流
    branches:
      - '**'  # 匹配所有分支

jobs:
  build-server:
    name: Build Server and Extenders
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y mingw-w64 make
    
    - name: Setup Go 1.24.4
      run: |
        wget https://go.dev/dl/go1.24.4.linux-amd64.tar.gz -O /tmp/go1.24.4.linux-amd64.tar.gz
        sudo rm -rf /usr/local/go
        sudo tar -C /usr/local -xzf /tmp/go1.24.4.linux-amd64.tar.gz
        echo "/usr/local/go/bin" >> $GITHUB_PATH
    
    - name: Clone go-win7 for Windows 7 support
      run: |
        git clone https://github.com/Adaptix-Framework/go-win7 /tmp/go-win7
        sudo mv /tmp/go-win7 /usr/lib/
    
    - name: Build server
      run: make server
    
    - name: Build extenders
      run: make extenders
    
    - name: Upload server artifacts
      uses: actions/upload-artifact@v4
      with:
        name: server-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/*

  build-client-linux:
    name: Build Client for Linux
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y gcc g++ build-essential make cmake libssl-dev
        sudo apt install -y qt6-base-dev qt6-websockets-dev qt6-declarative-dev
    
    - name: Build client
      run: make client
    
    - name: Upload client artifacts
      uses: actions/upload-artifact@v4
      with:
        name: client-linux-amd64
        path: dist/AdaptixClient

  build-client-macos-amd64:
    name: Build Client for macOS (Intel)
    runs-on: macos-13
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        brew update
        brew uninstall cmake
        brew install make cmake openssl qt@6
        echo "$(brew --prefix qt@6)/bin" >> $GITHUB_PATH
    
    - name: Build client
      run: make client
    
    - name: Upload client artifacts
      uses: actions/upload-artifact@v4
      with:
        name: client-macos-amd64
        path: dist/AdaptixClient

  build-client-macos-arm64:
    name: Build Client for macOS (Apple Silicon)
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        brew update
        brew uninstall cmake
        brew install make cmake openssl qt@6
        echo "$(brew --prefix qt@6)/bin" >> $GITHUB_PATH
    
    - name: Build client
      run: make client
    
    - name: Upload client artifacts
      uses: actions/upload-artifact@v4
      with:
        name: client-macos-arm64
        path: dist/AdaptixClient

  build-client-windows-amd64:
    name: Build Client for Windows (x64)
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.6.*'
        modules: 'qtwebsockets'
        arch: 'win64_msvc2019_64'
        cache: true
    
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    
    - name: Configure CMake
      run: |
        cd AdaptixClient
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -A x64
    
    - name: Build
      working-directory: AdaptixClient/build
      run: cmake --build . --config Release
    
    - name: Package with dependencies
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path "dist-windows"
        
        $exeFile = Get-ChildItem -Path "AdaptixClient\build" -Filter "*.exe" -Recurse | 
                   Where-Object { $_.Name -like "*AdaptixClient*" -or $_.Name -like "*Adaptix*" } | 
                   Select-Object -First 1
        
        if ($exeFile) {
          Write-Host "Found executable: $($exeFile.FullName)"
          Copy-Item $exeFile.FullName -Destination "dist-windows\"
          
          $qtBin = "$env:Qt6_DIR\bin"
          & "$qtBin\windeployqt.exe" "dist-windows\$($exeFile.Name)"
        } else {
          Write-Host "Warning: Could not find AdaptixClient executable"
          Get-ChildItem -Path "AdaptixClient\build\Release" -Filter "*.exe" -ErrorAction SilentlyContinue | 
            ForEach-Object {
              Copy-Item $_.FullName -Destination "dist-windows\"
              & "$qtBin\windeployqt.exe" "dist-windows\$($_.Name)"
            }
        }
    
    - name: Upload client artifacts
      uses: actions/upload-artifact@v4
      with:
        name: client-windows-amd64
        path: dist-windows/*

  create-release:
    name: Create Release
    needs: [
      build-server, 
      build-client-linux, 
      build-client-macos-amd64, 
      build-client-macos-arm64, 
      build-client-windows-amd64
    ]
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/main'  # 仅在提交到 main 分支时创建 Release
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get version number
      id: version
      run: |
        # 从 README.md 第一行提取版本号（格式：# AdaptixC2 vX.Y）
        if [ -f "README.md" ]; then
          VERSION=$(head -n 1 README.md | grep -o 'v[0-9]\+\.[0-9]\+\(\.[0-9]\+\)\?')
          if [ -z "$VERSION" ]; then
            echo "No valid version found in README.md, using default version 0.0.0"
            echo "version=0.0.0" >> $GITHUB_OUTPUT
          else
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi
        else
          echo "README.md not found, using default version 0.0.0"
          echo "version=0.0.0" >> $GITHUB_OUTPUT
        fi
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Display structure
      run: |
        echo "=== Artifacts structure ==="
        ls -la artifacts/
        echo "=== Content of each artifact ==="
        for dir in artifacts/*/; do
          echo "Content of $dir:"
          ls -la "$dir"
        done
    
  
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "${{ steps.version.outputs.version }}"
        name: "Adaptix C2 Release ${{ steps.version.outputs.version }}"
        draft: false
        prerelease: false
        files: |
          artifacts/*.zip
          AdaptixC2-All-Platforms-*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}